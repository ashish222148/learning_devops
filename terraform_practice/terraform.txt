**********************************************************************************************************************************************************************************************************************
chapter-1
**********************************************************************************************************************************************************************************************************************
Chapter-1
Terraform(IAAC) has two edition:
1-community edition (free and open source)
2-enterprise edition (paid)
registry.terraform.io
scope:identify resource where you want to write the data.scope can be multiple (like aws, azure, gcp etc)
author:write code/ terraform configuration
initialize: local file will be downloaded
plan:get the result what is goint to happen before deploy
apply: make the changes.

plaform have multiple interface:
	CLI:
	GUI:
	when program wants to connect to your application, then we need a account which is known as service account.
	for authetication to any application we need service account.
	application has own interface which is known as api
	user interface : cli and gui, these are interactive, we give the input on demand
	application interface : api for example git hub rest api endpoint, its non iteractive
	curl https://qoogle.com -- vvv
	vvv: verbocity mode has been increased.
	chere will be get command bydefault being used.
	plugins/provider (just like dictionary): when we run init , it downloads plugins, because how the terraform will undertand the language of target (aws/azure/gcp) .
	terraform download provider from the registry, i.e. registry. terraform.io
Note: there should be api on target and second thing provider should be there.
	provider have three category:
		1-official (managed by hasicorp)
		2-partner (managed by provider it self)
		3-community
	there are versions of provider as well.
	priovider written in go langualge even terraform written in go language.
Exam Ques: does terraform need go language required to run terraform ? NO
	key value language: json and yml and xml

json : no indentation required
yml: indentaion required
terraform -- version

COMMANDS:
	terraform validate
	terraform init
	terraform plan
	terraform deploy
	terraform fmt --check ::it will report if the formating of tf file is wrong
	terraform fmt :: it checks and correct the formating
	terraform graph
	terraform graph | dot -Tsvg > graph.svg
	terraform taint
	terraform untent --help


**********************************************************************************************************************************************************************************************************************
chapter-2  terraform block, provider block, resource block
**********************************************************************************************************************************************************************************************************************
Chapter-2:
main.tf: file name could be any , only extension should be .tf
	a-terraform init-download provider, initialize backend, download module. this is one time activity unless you change terraform block.backend is location where terraform keeps its state file, if you not mention
					the location, its keep the same in the current directory.
					when we run the terraform init, it initialize the backend, initializing provider plugins and terraform create a hcl file(terraform. lock.hcl) to record the provider selection it made made above.
					Include this file in your version control system (vcs) like github, so that terraform can gurantee to make the same selection by default when you run the "terraform init" in future.
					terraform download providers and downloads in .terraform folder (hidden file)

	b-terraform plan-checks the config drift and present the summary of what changes are going to be provisioned.
	c-terraform apply-apply the changes presented in your plan i.e provision infrastructure

	all above these command , will read all the .tf files in the directory and aggregate them and then work on it, it is alos known as terraform configuration file.
	code: Written in HCL
	
	blocks:
	1-terraform : how many providers are required to this terraform to accomplish the task and those provider will be downloaded from this place., we can also mention the url here.
	2-providers : aws configuration option for example region.
	3-resource
	4-variable
	5-output
	6-module
	7-local

main.tf:
single provider:

//---->terraform block

terraform {
	required providers {
		aws {
			source = "hashicorp/aws"
			version - "6.0.0-betal"
		}
	}
}
//---->provider block
provider "aws" (
	#Configuration options
	region = "ap-south-1"
}


multiple provider:
terraform {
	required providers {
		aws {
			source = "hashicorp/aws"
			version - "6.0.0-betal"
		}
		azurerm {
		source = "hashicorp/azurerm
		version = "4.28.0"
		}
	}
}

provider "aws"{
	# Configuration options
	region = "ap-south-1"
}
porovider "azurerm" {
# Configuration options
}


authentication with aws:
	The machine from where we are running the terraform, authentication required from that machine to aws, in case of jenkins, authentication will be at jenkins machine where terraform is running.
		1-not recommanded: in provider section , you can mention the same . but the problem is when you push the terraform code in git, it will be blocked.
			provider "aws" {
				#Configuration options
				region - "ap-south-1"
				access_key-""
				secret key=""

		2-Environment variable:recommanded method while using CICD.
			export AWS_ACCESS_KEY_ID=""
			export AWS_SECRET_ACCESS KEY-"
			
		3-download cli and configure
			aws configure -- profile-profilel
			export AWS DEFAULT PROFILE-profile1

//---->resource block:

	terraform {
	  required_providers {
		aws = {
		  source  = "hashicorp/aws"
		  version = "6.0.0-beta2"
		}
	  }
	}

	provider "aws" {
	  region = "ap-south-1"
	}



	resource "aws_vpc" "ailiya" {
	  cidr_block = "192.168.1.0"
	  tags = {
		name = "main"
	  }
	}

#note:any provider documentation only two block we will get, reources and data


Q:how to delete reource?
	original command
	terraform apply -- destroy
	alias
	terraform destroy

Note: If you want to delete a single resource, just comment it in configuration file and just fire command terraform apply.

What is state file:
    when we run command terraform apply, same will be excuted on cloud end and a copy of information of that resource(resource id) is going to be
    stored on state file.
    and next time when we run apply, it is going to check first in the statefile whether we have those information or not
    then it reads on the cloud end, whether same resource is available on clould or not.
    state file is written in json format.
	

If we manually do any modition in aws resource, then terraform is going to revert back the same because for terraform only source of truth is main.tf file.

resource name should be always diffrent.

terraform validate: this command will check the error if we will have in conguration file.
terraform apply -auto approve

	
**********************************************************************************************************************************************************************************************************************
chapter-3
**********************************************************************************************************************************************************************************************************************
chapter-3

reource id shold be unique.

when we run plan terraform plan, it first check the main.tf file then it goes in state file and check the resource just like aws_vpc.ailiya, if same is found in state file, it will refresh the satate file and fetch
the id, once id will be there it will go in aws and check the resource id, if same exist with the given value in statefile , it will not do any thing , else it will create or chage the resource in aws.

statefile keeps the recored of aws resource block.


**********************************************************************************************************************************************************************************************************************
chapter-4      variable block and version contraints
**********************************************************************************************************************************************************************************************************************
chapter-4

in cicd , we will use environment varibale menthod for authenticatio.

version contraints:
	semantic versioning:
    1.0.0
    major.minor.patch
    major: incapitable api changes
    minor: added functionality,backward compatibility
    patch: incremented, backward compatibility, bugfixes
	
	in pipe line every time we do init , pipeline launches on diffrent lachine
	
version constraints:
    version = ">= 1.2.0, < 2.0.0" --> this is best option
    The following operators are valid:
        = (or no operator): Allows only one exact version number. Cannot be combined with other conditions.
        !=: Excludes an exact version number.
        >, >=, <, <=: Comparisons against a specified version, allowing versions for which the comparison is true. "Greater-than" requests newer versions, and "less-than" requests older versions.
        ~>: Allows only the rightmost version component to increment. For example, to allow new patch releases within a specific minor release, use the full version number: ~> 1.0.4 will allow installation of 1.0.5 and 
		1.0.10 but not 1.1.0. This is usually called the pessimistic constraint operator.
		
		if provider already exist, so to download, user command
			~>5.60.0
			terraform init --upgrade
		terraform inint -upgrade, it will upgrade the provider , keeps both version which is installed previosly and the latest one as you mentioned in the command.
		
		
commenting:
    single line comment: //
    multiline comment: /*
                        */


suppose we do any manual change in aws, terraform will read the configuration file then it will check the same in state file, if resource is found, it will refresh the id, after getting the resource id, it will fetch the resouce id 
details through api and match the details from the configuraion file and changes accordingly.

provider Alias:
	if you want to create a resource not in given default region, but some resource you can create on diffrent region. then alias comes in to picture.
	
	provider block support only one region but we can't mention duplicate block, so we mention alias.
	
terraform {
	required providers {
		aws {
			source = "hashicorp/aws"
			version - "6.0.0-betal"
		}
	}
}
provider "aws" (
	#Configuration options
	region = "ap-south-1"
}

provider "aws" {
	region = "us-east-1"
	alias = "dev"
	}

resource "aws vpc" "ailiya"(
	cidr block = ""
	tags = {
		name = "main"
		}
}
resource "aws vpc" "ailiya1"(
	cidr block = ""
	tags = {
		name = "main"
		}
	provider =aws.dev
}
	
//---->variable block

variable will be define such as var.variable name .

variable declaration will be from declaration block. for every variable , there should be seperate declaration block.
in every variable declation block, we have to mention data type, else it will be considered as string by default. for example:

terraform {
	required providers {
		aws {
			source = "hashicorp/aws"
			version - "6.0.0-betal"
		}
	}
}

variable "region" {
	type = string
}

variable "cidr" {
	type = string
}


provider "aws" (
	#Configuration options
	region = var.region_name
}

resource "aws vpc" "ailiya"(
	cidr_block = var.cidr

}



Now the Question is , how we will provide the value of variable?

variable Passing:
	1-by argument
		-var <variable>=<value>
	example:
		terraform plan -var region="ap-south-1" -var cidr="192.168.1.2"
	
	2-by file:
		Explicitly providing file name in command prompt
			a-file with any name
				for example, ashish
				and mention the variable 
					region = "ap-south-1"
					cidr = 192.168.0.3/24
			then pass file name
			example:
				terraform plan -var-file=ashish
			Note: this is not recommended
		
		By default read file name from the same location
			b-terraform read file name in two forms:
				terraform.tfvars: give the exact file name
				no need to pass variable name explicitly
				for example:
					terraform plan
			c-keep any file name but extension will be auto.tfvars
				for example:
					ashish.auto.tfvars
	if you want to mention the by default variable , so define the same in variable block such as :
		variable "cidr" {
		type = string
		default="192.168.1.0/24"
		}
		
**********************************************************************************************************************************************************************************************************************
chapter-5
**********************************************************************************************************************************************************************************************************************
how we use variable in pipe line:
	in this method, we do not pass the value of variable from any file , we set environment variable like TF_VAR_cidr="192.168.1.0/24"
	
	to check echo $TF_VAR_cidr
	

	🧠 Priority Order (Highest to Lowest)
	Terraform resolves variables in this order:

	1-CLI -var flag
	2-terraform.tfvars or *.auto.tfvars file
	3-Environment variables (TF_VAR_*)
	4-Default values in the variable block

	✅ When to Use Each
	| Use Case                            | Recommended Method            |
	| ----------------------------------- | ----------------------------- |
	| One-time override or quick test     | `-var="name=value"`           |
	| CI/CD environment config or secrets | `TF_VAR_name` (env vars)      |
	| Shared defaults in team projects    | `terraform.tfvars` files      |
	| Default fallback                    | `default =` in variable block |


	to check how many TF_VAR envirnment variable set in linux:
		printenv | grep TF_VAR*
	
Scenario:1
	suppose you want to create the same reource in all environment, like dev ppte and prod.
	then what will be option we can use to pass the variable:
1:	terraform plan -var-file=filename.dev


		if there is any variable which is repetating the code or 
		any value which is same in all environment
		then new concept come in to picture:
			
	Local block:
		it can be used to replacemnent of variable block.
		when you defile local block, no need to define type and value will be passwing directly. and moost important thing, like we was using varibale as var.variable name
		but when we use local block variable, it will be as local.variablename, for example:
		
	main.tf:
		terraform {
		  required_providers {
			aws = {
			  source  = "hashicorp/aws"
			  version = "~> 5.0"
			}
		  }
		}
		
	terraform.auto.tfvars
		cidr = "192.168.1.0/24"
	
	locals.tf
		locals {
		  region="ap-south-1"
		  tags={
			Name="ashish"
		  }
		}
	provider.tf

		provider "aws" {
		  region = local.region
		}

	resource.tf
		resource "aws_vpc" "example" {
		  cidr_block = var.cidr
		  tags = local.tags
		}

	variable.tf

		variable "cidr" {
		  type = string
		}


2:  in first method, we have passed the value through diffrent file, but here we can mentyion all the environment in locals block. (but same is not recommanded)

	for example:
		locals{
		region="ap-south-1"
			dev = {				
						  tags={
								Name="ashish"
								}
			}
			
			prod ={
						  tags={
								Name="arun"
								}
			}			
			
			
		}
		
		
	here region is command , so we have mention the same just after the locals, while all others are in repective dev or prod block.
		
		

code:


	main.tf:
		terraform {
		  required_providers {
			aws = {
			  source  = "hashicorp/aws"
			  version = "~> 5.0"
			}
		  }
		}
		
	terraform.auto.tfvars
		cidr = "192.168.1.0/24"
	
	locals.tf
		locals {
		  region="ap-south-1"
		  tags={
			Name="ashish"
		  }
		}
	provider.tf

		provider "aws" {
		  region = local.region
		}

	resource.tf
		resource "aws_vpc" "dev_vpc" {
		  cidr_block = var.cidr
		  tags = local.dev.tags
		}
		resource "aws_vpc" "prod_vpc" {
		  cidr_block = var.cidr
		  tags = local.prod.tags
		}

	variable.tf

		variable "cidr" {
		  type = string
		}

Q: what is default standard follows in terraform?
	2 spaces
	
	
Required Version in Terraform:
	why we write version in code?
		to make sure what the code we have written will keep on working even if new version available.
	
	
	main.tf:
		terraform {
		  required_version ="~>1.12.0"
		  required_providers {
			aws = {
			  source  = "hashicorp/aws"
			  version = "~> 5.0"
			}
		  }
		}


LOG:
	by default logging is in info mode.
	in terraform we can enable the logging through environment variable.
	debug level:
		export TF_LOG=debug
		terraform plan
	trace level:(not used)
		export TF_LOG=trace
		terraform plan
	to save the log on a location:
		export TF_LOG_PATH=mylog.txt
		
	Note:	while we run terraform plan, on display only standard output we will get, rest of logs will be in log file.
	
	to unset log:
		unset TF_LOG
		unset TF_LOG_PATH
		
//---->output block:

	we can print the value of reource on screen with the help of output block.
	
	
	terraform {
	  required_providers {
		aws = {
		  source  = "hashicorp/aws"
		  version = "~> 5.0"
		}
	  }
	}

	# Configure the AWS Provider
	provider "aws" {
	  region = "ap-south-1"
	}

	# Create a VPC
	resource "aws_instance" "main" {
	  ami           = "ami-0af9569868786b23a"
	  instance_type = "t2.micro"
	}

	output "pubip" {
	  value = aws_instance.main.public_ip
	}

Note: here in output block , we can provide only one value to print.

but if you want to print multiple value in out put value, you have to use concept of interpolation.



	terraform {
	  required_providers {
		aws = {
		  source  = "hashicorp/aws"
		  version = "~> 5.0"
		}
	  }
	}

	# Configure the AWS Provider
	provider "aws" {
	  region = "ap-south-1"
	}

# Create a VPC
	resource "aws_instance" "main" {
	  ami           = "ami-0af9569868786b23a"
	  instance_type = "t2.micro"
	}

	output "pubip" {
	  value = "for newly created instance public ip is ${aws_instance.main.public_ip} and private ip is ${aws_instance.main.private_ip}"
	}


//---->data block:

data sourcing: by using data block, fetch the details of resource from the region is known as data sourcing, for example :
	to get the ami id of os.
	
	there are two block mentioned in the aws documentation: resource block and data source lock.
	
	data "aws_ami" "main"{
		owners = ""
		most_recent=true
		filter{
		name="name"
		values=["/ubuntu/images/hvs-ssd"]
		}
		}
	resource "aws_instance" "main"{
	ami=data.aws_ami.main.id
	}

data.aws_ami.main : data block fetch the information of aws ami so that we can use it.

State file manangement:
	state command:
		terraform state list: 
			how many resource in terraform state file.
		terraform state show <state id of resource>:
			to check the property of list
			
			
How to send any resource to managge manual?
	remove the entry from the configuration file:
	terraform state list: get the id from resource file
	terraform state rm <state id of resource>
	
How we will get to know which resource is managed by terraform?

	terraform state list
	terraform state show <state id of resource>
	check the instance id and match the same from aws.
	
**********************************************************************************************************************************************************************************************************************
chapter-6
**********************************************************************************************************************************************************************************************************************
If we want to manage any resource through terraform which is create earlier manually.
	--entry should be in state file and configuration file:
		terraform import aws_instance.main instance_id_in_aws
		
		this command will prepare instance id in state file, entry will be fetched to state file after running this command .
		
		Note: there should be a resource block with the below configuration:
			resource "aws_instance" "main"
			{
			
			}
		get the entry from the state file to the configuration file.
		for example:
			resource "aws_instance" "main"
			{
			ami="id-123456778"
			instance_type="t2.micro"
			}
	
		terraform plan
		terraform apply
		

Meta Argument:
	meta arguments are argument that can be used with any resource type:
		1-provider
		2-dependes_on:
			used for explicitly dependancy , it should be always in list.
		3-count
		4-for_each
		
	Implicit Dependancies:
		terraform maintain implicit dependancy by default like before creating subnet , vpc should be available there.
	Explicit Dependancies:
		some cases where we have to provide the same explicitly.
		for example:
			resource "aws_vpc" "dev_vpc"{
				cidr_block=var.cidr
				tags =local.dev.tags
				dependes_on=[aws_vpc.prod_vpc,etc..]
			}
			resource "aws_vpc" "prod_vpc"{
				cidr_block=var.cidr
				tags=local.prod.tags
			}
	Most Imp and widely used:
		count
		for_each
		
	both are used in loop
	
	count:
		work on the list items and outcome will be required in numbers only.
		
		resource "aws_vpc" "name"
		{
		count=2
		cidr_block="192.168.1.0"
		}
	there will be two resource create with the following name:
	aws_vpc.name[0]
	aws_vpc.name[1]
	
program of count:
	terraform {
	  required_providers {
		aws = {
		  source  = "hashicorp/aws"
		  version = "~> 5.0"
		}
	  }
	}

	# Configure the AWS Provider
	provider "aws" {
	  region = "ap-south-1"
	}

	locals {
	  cidr_block = ["192.168.0.0/24","10.0.0.0/24"]
	}
	resource "aws_vpc" "name" {
	  count      = 2
	  cidr_block = local.cidr_block[count.index]
	}
	output "vpcname" {
	  value = aws_vpc.name
	}

Question: Does terraform support user defined function?

Ans: No treeaform does not support user defined function.

function testing:
	length(["192.168.1.0/24","192.168.0.0/24"])
	toset(["192.168.1.0/24","192.168.0.0/24"])

program of count:
	
	terraform {
	  required_providers {
		aws = {
		  source  = "hashicorp/aws"
		  version = "~> 5.0"
		}
	  }
	}

	# Configure the AWS Provider
	provider "aws" {
	  region = "ap-south-1"
	}

	locals {
	  cidr_block = ["192.168.0.0/24","10.0.0.0/24"]
	}
	resource "aws_vpc" "name" {
	  count      = length(local.cidr_block)
	  cidr_block = local.cidr_block[count.index]
	}
	output "vpcname" {
	  value = aws_vpc.name
	}
	
Q: How to get availability zone from data and loop it , take cidr list and create subnet one one in every zone.

A: 

	terraform {
	  required_providers {
		aws = {
		  source  = "hashicorp/aws"
		  version = "~> 5.0"
		}
	  }
	}

	# Configure the AWS Provider
	provider "aws" {
	  region = "ap-south-1"
	}

	# Create a VPC
	resource "aws_vpc" "name" {
	  cidr_block = "192.168.0.0/16"
	}

	data "aws_availability_zones" "this" {
	  state = "availability"
	}
	locals {
	  subnet_cidr = ["192.168.0.0/24", "192.168.1.0/24", "192.168.2.0/24"]
	}
	resource "aws_subnet" "name" {
	  count             = length(data.aws_availability_zones.this.names)
	  vpc_id            = aws_vpc.name.id
	  availability_zone = data.aws_availability_zones.this.names[count.index]
	  cidr_block        = local.subnet_cidr[count.index]
	  depends_on        = [aws_vpc.name]
	}
	output "myazlist" {
	  value = data.aws_availability_zones.this.names
	}
	

for_each:

	count is limited to list data but in case of map data , we have to use for_each.it works for each work items.
	locals{
		mysubnets={
			subneta={
				az="ap-south-1"
				cidr="192.168.0.0/24"
			}
			subnetb={
				az="ap-south-1"
				cidr="92.168.1.0/24"
			}
		}
	}
	for_each=local.subnet
	value=each.value.az
	value=each.value.cidr
	
note : here item should be unique, such as subneta and subnetb

code:

	terraform {
	  required_providers {
		aws = {
		  source  = "hashicorp/aws"
		  version = "~> 5.0"
		}
	  }
	}

	# Configure the AWS Provider
	provider "aws" {
	  region = "ap-south-1"
	}

	# Create a VPC
	resource "aws_vpc" "name" {
	  cidr_block = "192.168.0.0/16"
	}

	data "aws_availability_zones" "this" {
	  state = "available"
	}

	locals {
	  subnets = {
		subneta = {
		  az   = "ap-south-1a"
		  cidr = "192.168.0.0/24"
		}
		subnetb = {
		  az   = "ap-south-1b"
		  cidr = "192.168.1.0/24"
		}
	  }
	}
	resource "aws_subnet" "name" {
	  for_each          = local.subnets
	  vpc_id            = aws_vpc.name.id
	  availability_zone = each.value.az
	  cidr_block        = each.value.cidr
	  depends_on        = [aws_vpc.name]
	}

	output "myazlist" {
	  value = data.aws_availability_zones.this.names
	}

**********************************************************************************************************************************************************************************************************************
chapter-7
**********************************************************************************************************************************************************************************************************************
if you want to use for_each with list(instaed of map):
	locals{
		cidr=["192.168.1.0/24","192.168.2.0"]
	}
	resource "aws_vpc" "main"{
	for_each =toset(local.cidr)
	cidr_block=each.value
	}
	
	
Functions:
	-numeric:
		max,min
	-string:
		lower,upper,split,regex,replace,join,strcontains,startswith,endswith
	-collection:
		index,flatten,keys,map,list,lookup,elements,concat,values,range,reverse
	-encoding:
		base64encode,base64decode,json,yaml
	-filesystem:
		file,dirname,basename,fileexists,
	-date &time:
		
	-ip network:
		cidrhost,cidrnetmask,cidrsubnet,cidrsubnets
	-type:
		toset,tobool
		
terraform console:
	> max(2,8,3)
	8
	> min(2,3,8)
	2
	> lower("ASHISH")
	"ashish"
	> upper("ashish"
	: )
	"ASHISH"
	> split(".","I.am.ashish")
	tolist([
	  "I",
	  "am",
	  "ashish",
	])

	> regex("[a-z]+","abc54778hgyfc8990")
	"abc"
	
	> replace("my name is ashish","ashish","arun")
	"my name is arun"
	
	> join (" ",["my","name","is","ashish"])
	"my name is ashish"

	> join (" ",["my","name","is","ashish"])
	"my name is ashish"
	
	> strcontains("my name is ashish","my")
	true
	> startswith("my name is ashish","my")
	true
	> endswith("my name is ashish","my")
	false
	> endswith("my name is ashish","sh")
	true
	above three function only return boolean value.
	
	> index(["ram","shyam","mohan","bholebaba"],"shyam")
	1
	> index(["ram","shyam","mohan","bholebaba"],"ram")
	0
	> element(["ram","shyam","mohan","bholebaba"],1)
	"shyam"
	> element(["ram","shyam","mohan","bholebaba"],0)
	"ram"
	>
	
flatten function covert all list in to a single list, even works on list within list.

	> flatten([["ram","shyam"],["mohan","bholebaba"]])
	[
	  "ram",
	  "shyam",
	  "mohan",
	  "bholebaba",
	]

	> keys({"name"="vijay","city"="ailiya"})
	[
	  "city",
	  "name",
	]
	> values({"name"="vijay","city"="ailiya"})
	[
	  "ailiya",
	  "vijay",
	]
	>
	> length(["a","b"])
	2
	works on map, if mentioned key found, value will be shown else default value can also show.
	> lookup({"name"="vijay","city"="ailiya"},"name")
	"vijay"
	>
	> lookup({"name"="vijay","city"="ailiya"},"names","ashish")
	"ashish"
	>
	tolist([
	  0,
	  1,
	  2,
	])
	
	> base64encode("ashish")
	"YXNoaXNo"
	
	> base64decode("YXNoaXNo")
	"ashish"
file:	to pass the content of file:
	> file("./main.tf")
	""
	> fileexists("./main.tf")
	true
	> fileexists("./mai.tf")
	false
	>
basename: only present file name

	> basename("/root/ashish.txt")
	"ashish.txt"
		
	> dirname("/root/ashish.txt")
	"/root"
	>
	
Most Imp:
cidrhost: if you want to get any specific ip from cidr
	> cidrhost("192.168.1.0/24",4)
	"192.168.1.4"
	>
	> cidrnetmask("192.168.1.0/29")
	"255.255.255.248"

	> cidrsubnet("192.168.1.0/24",2,1)
	"192.168.1.64/26"
	> cidrsubnet("192.168.1.0/24",2,0)
	"192.168.1.0/26"
	> cidrsubnet("192.168.1.0/24",2,2)
	"192.168.1.128/26"
	> cidrsubnet("192.168.1.0/24",2,3)
	"192.168.1.192/26"
Note: from where two comes:
	cidr value is 192.168.1.0/24, suppose we want 64 ips in each block, then we will use 192.168.1.0/26, because 32-26=6, and 2^6=64, so we will add in 24 , 2 to become 26.
	0 ,1, 2, 4 is the index number
	
VIMP: State file lock: at the same time only one can use the state file , for example if you have open terraform console and want to run the terraform plan on the same location , it will through an error that state lock.


**********************************************************************************************************************************************************************************************************************
chapter-8
**********************************************************************************************************************************************************************************************************************
ec2 with functions:
	ssh-keygen -f awskey
ami details to create instance:
	amazon/al2023-ami-2023.7.20250512.0-kernel-6.1-x86_64
	ami-0af9569868786b23a
	137112412989
	
How to create instance with the help of ami id filter:

	terraform {
	  required_providers {
		aws = {
		  source  = "hashicorp/aws"
		  version = "~> 5.0"
		}
	  }
	}

	# Configure the AWS Provider
	provider "aws" {
	  region = "ap-south-1"
	}

	# Create a VPC
	resource "aws_vpc" "ailiya_vpc" {
	  cidr_block = "192.168.0.0/16"
	}

	data "aws_ami" "main" {
	  owners = ["137112412989"]
	  most_recent = true
	  filter {
		name = "name"
		values = ["al2023-ami-2023.7.20250512.0-kernel-6.1-x86_64"] // it should be the ami name.
	  }
	}
	resource "aws_instance" "pubsrv" {
	  ami = data.aws_ami.main.id
	  instance_type = "t2.micro"
	}
	output "amiid" {
	  //value = "ami id is {data.aws_ami.main}"
	 value = data.aws_ami.main.id
	}
Note:values = ["al2023-ami-2023.7.20250512.0-kernel-6.1-x86_64"] // it should be the ami name. , we can choose it from ami section in aws 


Create subnet in ery availability zone:
---code -1 using count

	terraform {
	  required_providers {
		aws = {
		  source  = "hashicorp/aws"
		  version = "~> 5.0"
		}
	  }
	}

	# Configure the AWS Provider
	provider "aws" {
	  region = "ap-south-1"
	}
	locals {
	  cidr = "192.168.0.0/16"
	}
	# Create a VPC
	resource "aws_vpc" "ailiya_vpc" {
	  cidr_block = local.cidr
	}

	data "aws_availability_zones" "this" {
	  state = "available"
	}
	resource "aws_subnet" "main" {
	  count             = length(data.aws_availability_zones.this.names)
	  vpc_id            = aws_vpc.ailiya_vpc.id
	  availability_zone = data.aws_availability_zones.this.names[count.index]
	  cidr_block        = cidrsubnet(local.cidr, 8, count.index)
	}


---code -2 using for_each
	terraform {
	  required_providers {
		aws = {
		  source  = "hashicorp/aws"
		  version = "~> 5.0"
		}
	  }
	}

	# Configure the AWS Provider
	provider "aws" {
	  region = "ap-south-1"
	}
	locals {
	  cidr = "192.168.0.0/16"
	}
	# Create a VPC
	resource "aws_vpc" "ailiya_vpc" {
	  cidr_block = local.cidr
	}

	data "aws_availability_zones" "this" {
	  state = "available"
	}
	resource "aws_subnet" "main" {
	  for_each          = toset(data.aws_availability_zones.this.names)
	  vpc_id            = aws_vpc.ailiya_vpc.id
	  availability_zone = each.key
	  cidr_block        = cidrsubnet(local.cidr, 8, index(data.aws_availability_zones.this.names, each.key))
	}
	
	
taint: to recreate reource
terraform taint: in state file any reource file will be labeled as taint.
	terraform taint reourceid
	terraform untent
	
**********************************************************************************************************************************************************************************************************************
chapter-9
**********************************************************************************************************************************************************************************************************************
meta arguments: completed: used mostly in resource block.
expression:
	expressions ca be used anywhere. there are two type of expression
		1-condition:
			outcome sholud be : true | false
				statement=condition?<true value>:<false value>
		2-dynamic block:
		
	

	module "s3-bucket" {
	  source  = "terraform-aws-modules/s3-bucket/aws"
	  version = "4.10.0"
	}

	sources:
		1-local path:./athofmodule
			local file system does not support versioning.
		2-github:github.com/hashiscorp/example?ref=(branchname/tagname)
			version is in line for exm: ?ref(branchname/tagname)
		3-private registry:tfe.gcp.mylab.local/pmr/aws_network_vpc
		4-public registry:terraform-aws-modules/s3-bucket/aws
			if source is started with terraform ...then its public registry
		5-s3-bucket: s3::https://s3-ap-south-1.amazon.com/example.zip
			always end with zip and no versioning in s3.
		http:https://myregis.local.asd.zip

	every time when we use module, we have to initialize the same, by command terraform init
	

private module:
	local->git->private-registry
module development:
	1-don't use loop
	2-variable shold be variablsed
	3-child output parent me output
	
	child block should not contain in terraform block and provider block.
	




**********************************************************************************************************************************************************************************************************************
chapter-11
**********************************************************************************************************************************************************************************************************************
State file can't be save on source code management system(git)
module can be stored on git.

module have only pull action.

module has diffrent version constarints:
module is like a block:
	module is being called in child modulle. and current directory where module is calling is known as root module.
	
	module  is of two types:
		1-private module
		2-public moduule
		