#chapter-1------------------------------------------Understanding Weired Symbols----------------------------------------------------------------------
1-Reserved Variable($_ or $PSITEM):
    get-service | where-object {$_}
        data which we receive as a input for next cmdlet is going to store in a variable _. It is manadatory that | symbol data
        will alsways be stored in _
        suppose you want to get only one item from that input then command will be like:
    get-service | where-object{$_.status -eg "stopped"}
2-dot operator:
    $service =get-service bits
    $service.status

IMP:   . operator will be used to access the property and menthod both, for example
    $service.stop()
    get-service bits
     
     use case:
        if we have txt file, we use get-content whereas if there will be csv file then,
        $computername =Import-csv c:\temp\computername.csv

        and suppose our csv file will contain the cname as header
        $computername.cname
        get-service bits -computername 


How to convert string in upper letter.
    $username ="ashish"
    $username | get-member
    $username.toupper()
    $username.tolower()

------------------------------------------------------------------------------------------------------------------------
Paranthesis or Round brackets:

(): excute first
    if any cmdlet need to excute first then we have to put in ()

    get-service -computername (get-content c:\temp\comp.txt)

    (get-service bits).name

{}: excute last

input from host:
    Read-host "Please enter the number to double"

    $number=read-host "please enter the number to double !!"
    $number +$number
IMP: to chekc the type 
    $number|get-member

[]
Type Casting:
    [int]$pin="ahmad"

"2"+2=22 because fist number is string
2+"2"=4  because first number is integer

------------------------------------------------------------------------------------------------------------------------------
Append Variable and Array:
    @()
    to nullify variable :
        $name=$null
    $name="ashish"
    $name =$name +" "+"kumar"

    or
    $name+=" kumar"

    $name = $null

    $name=@()
    $name +="ashish"
    $name +="singh"
    $name
    ashish
    singh

    or we can type casting at the begining:
    [array]$name="ashish"
    $name +="kumar"

to get count:
    $name.count
    $name[0]
    $name[-1]
    (get-service).count 
    (get-service)[-1]
-------------------------------------------------------------------------------------------------------------------------------------------------
Split, replace , trim

replace:
    $word="Ashish the great"
    $word -replace "the" ,"is"

join:    
    $number=1,2,3
    $number -join ";"

split:
    $word -split " "

Trim:
    $name ="ashish "
    $name.length
    ($name.trim()).length

#-----------------------------------------------------------------------Understanding Hash tables-------------------------------------------------

HashTable:
     Get-WmiObject -Class win32_operatingsystem | Select-Object -Property caption,pscomputername | Export-Csv -NoTypeInformation C:\temp\ashish.csv

VVVIMP: when type info not required in csv file.

How to get all classes:
    get-WmiObject -list
to get in GUI:
    Get-WmiObject -list |Out-GridView
        add criteria win32 , then filter service 

if you want to run multiple command : use semicolumn
    cls;get-service

suppose we want to add column name as per our convenience , then we use has table.
@{}-hash table 
Syntax of HashTable:
    @{
        name='OS;expression={}
    }

here name is property name and ; used to run another command then value will be in expression Part .

Get-WmiObject -Class win32_operatingsystem |Select-Object -Property caption,@{name='OS';expression={$_.caption}}

Get-WmiObject -Class win32_operatingsystem |Select-Object -Property @{name='OS';expression={$_.caption}},@{name='server_name';expression={$_.pscomputername}}
    notes: we can replace name with n and expression with e. for exp:
Get-WmiObject -Class win32_operatingsystem |Select-Object -Property @{name='OS';expression={$_.caption}},@{n='server_name';e={$_.pscomputername}}

---------------------------------------------------------------------***********------------------------------------------------------------------------------------
HashTable using object::

    suppose we want some data with property name as header then:
        get-winobject win32_bios | select serialnumber

        if need only one value, without property name
        (get-WmiObject win32_bios).serialnumber

    using the diffrent diffrent cmdlet , we will create a new object with -type psobject and -property will be all cmdlet:
    steps:
        create new-object , type is psobject and property will be variable

        $os=(get-winobject win32_operatingsystem).caption
        $compsys=get-WmiObject win32.computersystem
        $serial=(get-WmiObject win32_bios).serialnumber
        $cpucore=(get-winobject win32_processor).numberofcores

        new-object -typename psobject -property @{
            os=$os
            MF=$compsys.manufacturer
            sn=$serial
            core=$cpucore
            RAM=$compsys.totalphysicalmemory
        } format-table OS,RAM,CORE,SN,MF

    example-2:
        $hostname=hostname
        $getcominfo = get-computerinfo
        new-object -typename psobject -property @{
            hostname=$host_name
            osname=$getcominfo.osname
            osversion=$getcominfo.osversion
        } | export-csv -NoTypeInformation c:temp\sample.csv


---------------------------------------------------------------------Foreach--------------------------------------------------------------------------------------

foreach syntax:
    foreach(condition){action}

        comad which accept only one value, we can use foreach.

$servers=get-content c:\temp\server.txt
foreach ($ser in $servers)
    {get-windoesfeather rsat-ad-powershell -computername $ser}

ex:
    $users=get-content c:\temp\users.txt
    foreach($usr in $users)
    {
        get-aduser $usr | select-object -property name,enabled
    }

Note: always use for each even if the cm,dlet accept multiple values because it run till the last object, else it will terminate if there will be any error.


-----------------------------------------------------------------if-elseif---------------------------------------------------------------------------------
$oxygen=95
if ($oxygen -ge 95)
{write-host "No action taken"}
elseif ($oxygen -ge 88 -and $oxygen -le 94)
{write-host "need to be hospitalize !!"}
else
{write-host "RIP"}

ex-2:
    $computername ="desktop-machine","notonline"
    foreach($comp in $computername)
    {
        $ping=Test-connection -computername $comp -quiet
        if ($ping -like "True")
        {write-host "$comp is up and running !!"}
        else
        {write-host "comp is offline"}
    }
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Error Handling::





----------------------------------------------------------------------Function---------------------------------------------------------------------------------
PS C:\Users\Admin> hostname
DESKTOP-5KG4RAG

PS C:\Users\Admin>    function get-ping{
    $computername ="desktop-5KG4RAG","notonline"
    foreach($comp in $computername)
    {
        $ping=Test-connection -computername $comp -quiet
        if ($ping -like "True")
        {write-host "$comp is up and running !!"}
        else
        {write-host "comp is offline"}
    }
    }

PS C:\Users\Admin> get-ping
desktop-5KG4RAG is up and running !!
comp is offline

PS C:\Users\Admin> 

Adding parameter to own created function:
    function get-ping{
        param(
            [string[]]$computername
        )
    $computername ="desktop-5KG4RAG","notonline"
    foreach($comp in $computername)
    {
        $ping=Test-connection -computername $comp -quiet
        if ($ping -like "True")
        {write-host "$comp is up and running !!"}
        else
        {write-host "comp is offline"}
    }
    }

if we want to add the parameter , we have to add param block, as we have added parameter computername , so which erunning script get-ping -computername will be avilable.

PS C:\Users\Admin>     function get-ping{
        param(
            [string[]]$computername
        )
    #$computername ="desktop-5KG4RAG","notonline"
    foreach($comp in $computername)
    {
        $ping=Test-connection -computername $comp -quiet
        if ($ping -like "True")
        {write-host "$comp is up and running !!"}
        else
        {write-host "comp is offline"}
    }
    }

PS C:\Users\Admin> get-ping -computername "desktop-5KG4RAG","notonline"
desktop-5KG4RAG is up and running !!
comp is offline




VIMP: if you want that no one can directly run get-ping without entering the parameter
        then you have to make it permanant.-->> [parameter(mandatory=$true)]


    function get-ping{
        param(
                    [parameter(mandatory=$true)]
                    [string[]]$computername
                )
            #$computername ="desktop-5KG4RAG","notonline"
            foreach($comp in $computername)
            {
                $ping=Test-connection -computername $comp -quiet
                if ($ping -like "True")
                {write-host "$comp is up and running !!"}
                else
                {write-host "comp is offline"}
            }
    }


Understanding cmdletbinding:
    while you write cmdletbinding in your code by default all the parameter option will be available like error action , verbose etc
        [cmdletbinding()]
        

PS C:\Users\Admin>     function get-ping{
        [cmdletbinding()]
        param(
                    [parameter(mandatory=$true)]
                    [string[]]$computername
                )
            #$computername ="desktop-5KG4RAG","notonline"
            foreach($comp in $computername)
            {
                $ping=Test-connection -computername $comp -quiet
                if ($ping -like "True")
                {write-host "$comp is up and running !!"}
                else
                {write-host "comp is offline"}
            }
    }

PS C:\Users\Admin> get-ping -computername desktop-5KG4RAG -Verbose
desktop-5KG4RAG is up and running !!


Difference between running the command through powershell ISE and normal powershell
    normal powershell does not keep the fuction live while you are running the second command
    for example, if we save the above script as ping.ps1 and run the ping.ps1, again when we run get-ping it will through an error
    because that function is not in the memory.(means first script is completed , and second script will be independent.)
    but in ise it will bind the function.

    to overcome this we can user . .\ping.ps1 -->> so the script is not completed yet (loaded only), you can run the second command


-------------------------------------------------------------------Understanding Begin,Process,End-------------------------------------------------------------------------------

to accept value from pipeline:

